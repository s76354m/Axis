// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProgramManagement.Data;

#nullable disable

namespace ProgramManagement.Migrations
{
    [DbContext(typeof(ProgramManagementContext))]
    [Migration("20241026092601_AddCompetitorColumns")]
    partial class AddCompetitorColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProgramManagement.Models.Competitor", b =>
                {
                    b.Property<int>("CompetitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompetitorId"));

                    b.Property<bool>("CSPIndicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("CSP indicator flag");

                    b.Property<bool>("EIIndicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("EI indicator flag");

                    b.Property<decimal>("Lives")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MRIndicator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("MR indicator flag");

                    b.Property<decimal>("MarketShare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PayorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the payor");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Product name");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Reference to the parent project");

                    b.Property<string>("SPCIndicator")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("SPC indicator value");

                    b.HasKey("CompetitorId");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("IX_Competitors_ProjectId");

                    b.HasIndex("ProjectId", "PayorName", "Product")
                        .IsUnique()
                        .HasDatabaseName("IX_Competitors_ProjectId_PayorName_Product");

                    b.ToTable("Competitors", (string)null);
                });

            modelBuilder.Entity("ProgramManagement.Models.Project", b =>
                {
                    b.Property<string>("ProjectId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Analyst")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BenchmarkFileId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("GoLiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastEditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastEditMSID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("NDBLOB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewMarket")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProjectManager")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProjectType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("RefreshInd")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProjectId");

                    b.ToTable("CS_EXP_Project_Translation", (string)null);
                });

            modelBuilder.Entity("ProgramManagement.Models.ProjectNote", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Note category");

                    b.Property<DateTime>("EditDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Date when the note was last edited");

                    b.Property<string>("LastEditMSID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("MSID of the last user to edit the note");

                    b.Property<DateTime>("LoadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Date when the note was created");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Note content");

                    b.Property<string>("OriginalMSID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("MSID of the user who created the note");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Reference to the parent project");

                    b.HasKey("NoteId");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_ProjectNotes_Category");

                    b.HasIndex("LoadDate")
                        .HasDatabaseName("IX_ProjectNotes_LoadDate");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("IX_ProjectNotes_ProjectId");

                    b.ToTable("ProjectNotes", (string)null);
                });

            modelBuilder.Entity("ProgramManagement.Models.YLine", b =>
                {
                    b.Property<int>("YLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YLineId"));

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPANumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("IPA number");

                    b.Property<bool>("IsOptional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Indicates if this is an optional Y-Line");

                    b.Property<bool>("IsPreAward")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Indicates if this is a pre-award Y-Line");

                    b.Property<DateTime>("LoadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MarketNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Market number");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Product code");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Reference to the parent project");

                    b.HasKey("YLineId");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("IX_YLines_ProjectId");

                    b.HasIndex("ProjectId", "IPANumber")
                        .IsUnique()
                        .HasDatabaseName("IX_YLines_ProjectId_IPANumber");

                    b.ToTable("YLines", (string)null);
                });

            modelBuilder.Entity("ProgramManagement.Models.Competitor", b =>
                {
                    b.HasOne("ProgramManagement.Models.Project", "Project")
                        .WithMany("Competitors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProgramManagement.Models.ProjectNote", b =>
                {
                    b.HasOne("ProgramManagement.Models.Project", "Project")
                        .WithMany("Notes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProgramManagement.Models.YLine", b =>
                {
                    b.HasOne("ProgramManagement.Models.Project", "Project")
                        .WithMany("YLines")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProgramManagement.Models.Project", b =>
                {
                    b.Navigation("Competitors");

                    b.Navigation("Notes");

                    b.Navigation("YLines");
                });
#pragma warning restore 612, 618
        }
    }
}
